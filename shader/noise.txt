// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs noise [Color A] [Color B] [Size X] [Size Y] [Size Z]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Color A'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Color B'  value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Size X'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Size Y'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Size Z'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// xs_end

float random(vec2 co, float seed) {
    return fract(cos(dot(co.xy, vec2(23.14069263277926, pow(sqrt(2.0), 2.0)))) * (43758.5453 + seed));
}

float pal_min = i_args[0];
float pal_max = i_args[1];
float size_x = max(i_args[2], 1.0);
float size_y = max(i_args[3], 1.0);
float size_z = max(i_args[4], 1.0);

float map(vec3 v) {
	float index = voxel(v);

	bool no_axis_mode = all(equal(ivec3(i_axis), ivec3(0, 0, 0)));
	float x = (no_axis_mode || i_axis.x == 1.0) ? floor(v.x / size_x) : 1.0;
	float y = (no_axis_mode || i_axis.y == 1.0) ? floor(v.y / size_y) : 1.0;
	float z = (no_axis_mode || i_axis.z == 1.0) ? floor(v.z / size_z) : 1.0;
	float j = random(vec2(x, y), i_iter + 1.0);
	float k = random(vec2(j, z), i_iter + 1.0);

	if (index == i_color_index) {
		return mix(pal_min, pal_max, k);
	} else {
		return index;
	}
}
