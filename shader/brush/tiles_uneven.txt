// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs brush/greebles [Mode] [Count] [Width] [Height] [Depth] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Min'  value = '4'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Max'  value = '8'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Thickness'  value = '1'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Seed'  value = '1'  range = '0 100'  step = '1'  decimal = '0' }
// xs_end

float thickness = max(i_args[2], 0.0);
float size_min = min(i_args[0], i_args[1]) + thickness;
float size_max = max(i_args[0], i_args[1]) + thickness;
float global_seed = mix(-437.5453, 437.5453, i_args[3] / 100.0);

struct Series {
	float index;
	float size;
	float local;
};

float random(vec2 co) {
    return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.5453 + global_seed));
}

float random(vec3 co) {
	return random(vec2(random(co.xy), co.z));
}

Series find_series(int limit, vec2 seed_multiplier) {
	float cell_index = 0.0;
	float cell_size = 0.0;
	int last_index = 0;

	for (int i = 0; i <= limit;) {
		vec2 seed = vec2(float(i)) * seed_multiplier;

		last_index = i;
		cell_index += 1.0;
		cell_size = floor(mix(size_min, size_max, random(seed)));
		i += int(cell_size);
	}

	float local_pos = (cell_index == 0.0) ? float(limit) : float(limit - last_index);
	Series j = Series(cell_index, cell_size, local_pos);
	return j;
}

float map(vec3 v) {
	ivec3 iv = ivec3(v);
	Series x = find_series(iv.x, vec2(64.0,  0.0));
	Series y = find_series(iv.y, vec2( 0.0, 64.0));

	vec2 index = vec2(x.index, y.index);
	vec2 local = vec2(x.local, y.local);
	vec2 size = vec2(x.size, y.size);

	if (all(lessThan(local.xy, size.xy - vec2(thickness)))) {
		if (mod(index.x + index.y, 2.0) == 0.0) {
			float f = random(index.xy);
			// float x = floor(local.x);
			float slice = floor(mix(thickness * 2.0, size.x - thickness * 2.0, f));

			// if (x > slice && x <= slice + thickness) {
			// 	return i_color_index;
			// } else {
				return index.x + index.y;
			// }
		} else {
			float f = random(index.xy);
			// float y = floor(local.y);
			float slice = floor(mix(thickness * 2.0, size.y - thickness * 2.0, f));

			// if (y > slice && y <= slice + thickness) {
			// 	return i_color_index;
			// } else {
				return index.x + index.y;
			// }
		}
	} else {
		return i_color_index;
	}
}
