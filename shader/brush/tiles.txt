// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs brush/tiles [Width] [Height] [Depth] [Offset X] [Offset Y] [Offset Z]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Width'  value = '2'  var = 'm_width'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Height'  value = '2'  var = 'm_height'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Depth'  value = '2'  var = 'm_depth'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Offset X'  value = '0'  var = 'm_offset_x'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Offset Y'  value = '0'  var = 'm_offset_y'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '5'  name = 'Offset Z'  value = '0'  var = 'm_offset_z'  range = '0 256'  step = '1'  decimal = '0' }
// xs_end

vec3 dim = vec3(m_width, m_height, m_depth);
vec3 offset = vec3(m_offset_x, m_offset_y, m_offset_z);

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float map(vec3 v) {
	if (mod(v.x + offset.x, dim.x * 2.0) < dim.x) {
		if (mod(v.y + offset.y, dim.y * 2.0) < dim.y) {
			if (mod(v.z + offset.z, dim.z * 2.0) < dim.z) {
				return pal(0.0);
			} else {
				return pal(1.0);
			}
		} else {
			if (mod(v.z + offset.z, dim.z * 2.0) < dim.z) {
				return pal(1.0);
			} else {
				return pal(0.0);
			}
		}
	} else {
		if (mod(v.y + offset.y, dim.y * 2.0) < dim.y) {
			if (mod(v.z + offset.z, dim.z * 2.0) < dim.z) {
				return pal(1.0);
			} else {
				return pal(0.0);
			}
		} else {
			if (mod(v.z + offset.z, dim.z * 2.0) < dim.z) {
				return pal(0.0);
			} else {
				return pal(1.0);
			}
		}
	}
}
