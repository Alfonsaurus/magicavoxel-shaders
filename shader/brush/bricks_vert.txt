// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs brush/bricks_vert [Mode] [Direction] [Height] [Depth] [Width] [Grout Size] [Grout Color] [Offset] [Noise] [Threshold]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Mode'  value = '0'  var = 'm_mode'  range = '0 2'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Direction'  value = '0'  var = 'm_direction'  range = '0 3'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Height'  value = '5'  var = 'm_height'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Depth'  value = '2'  var = 'm_depth'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Width'  value = '3'  var = 'm_width'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '5'  name = 'Grout Size'  value = '1'  var = 'm_grout_size'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '6'  name = 'Grout Color'  value = '1'  var = 'm_grout_color'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '7'  name = 'Offset'  value = '0'  var = 'm_offset'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '8'  name = 'Noise'  value = '0'  var = 'm_noise'  range = '0 100'  step = '1'  decimal = '1' }
// arg : { id = '9'  name = 'Threshold'  value = '100'  var = 'm_threshold'  range = '0 100'  step = '1'  decimal = '1' }
// xs_end

int mode = int(m_mode);
int direction = int(m_direction);
float height = m_height;
float depth = m_depth;
float width = m_width;
float grout = m_grout_size;
float grout_color = m_grout_color;
float row_offset = m_offset;
float noise = m_noise / 100.0;
float threshold = m_threshold / 100.0;

float random(vec2 co, float seed) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + seed));
}

float random(vec3 co, float seed) {
	float a = random(co.xy, seed);
	return random(vec2(a, co.z), seed);
}

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

vec3 mod3(vec3 a, vec3 b) {
	return vec3(mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z));
}

vec3 brick(vec3 p, vec3 dim, float offset) {
	vec3 bk = floor(p / dim);
	bk.x = floor((p.x + bk.z * (offset * (bk.y + 1.0))) / dim.x);
	return bk;
}

float map(vec3 v) {
	vec3 dim = vec3(width, depth, height) + grout;
	float d;

	if (direction == 0) {
		v = v.xyz;
		d = dim.x;
	} else if (direction == 1) {
		v = v.yxz;
		d = dim.y;
	} else if (direction == 2) {
		v = v.yzx;
		d = dim.y;
	} else if (direction == 3) {
		v = v.xzy;
		d = dim.y;
	}

	float offset = (row_offset == 0.0) ? floor(d / 2.0) : row_offset;

	vec3 bk = brick(v, dim, offset);
	vec3 iv = vec3(v.x + bk.z * (offset * (bk.y + 1.0)), v.yz);
	vec3 ic = mod3(iv, dim);

	float bk_randomness = random(bk, bk.x * bk.y);

	if (bk_randomness < threshold) {
		if (any(greaterThanEqual(ic, floor(dim - grout)))) {
			return grout_color;
		} else {
			float bk_color;

			if (mode == 0) {
				float r = random(bk, 0.0);
				bk_color = r;
			} else if (mode == 1) {
				float m = ceil(i_volume_size.z / dim.z);

				if (direction == 0) {
					bk_color = (bk.z / m);
				} else if (direction == 1) {
					bk_color = (bk.y / m);
				} else if (direction == 2) {
					bk_color = (bk.y / m);
				} else if (direction == 3) {
					bk_color = (bk.z / m);
				}
			} else if (mode == 2) {
				float m = ceil(i_volume_size.z / dim.z);

				if (direction == 0) {
					bk_color = (1.0 - bk.z / m);
				} else if (direction == 1) {
					bk_color = (1.0 - bk.y / m);
				} else if (direction == 2) {
					bk_color = (1.0 - bk.y / m);
				} else if (direction == 3) {
					bk_color = (1.0 - bk.z / m);
				}
			}

			if (random(v, 0.0) < noise) {
				return pal(random(v, 64.0));
			} else {
				return pal(bk_color);
			}
		}
	} else {
		return 0.0;
	}
}
