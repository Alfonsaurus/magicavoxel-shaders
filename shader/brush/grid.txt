// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs brush/grid [Color A] [Color B] [Thickness] [Size X] [Size Y] [Size Z]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Color A'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Color B'  value = '2'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Thickness'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Size X'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Size Y'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '5'  name = 'Size Z'  value = '1'  range = '1 256'  step = '1'  decimal = '0' }
// xs_end

float thickness = max(i_args[2], 1.0) - 1.0;
vec3 dim = vec3(max(i_args[3], 1.0) + 1.0,
				max(i_args[4], 1.0) + 1.0,
				max(i_args[5], 1.0) + 1.0)

bool no_axis_mode = all(equal(ivec3(i_axis), ivec3(0)));
bvec3 axis_mode = no_axis_mode ? bvec3(true) : equal(ivec3(i_axis), ivec3(1));

float map(vec3 v) {
	if (axis_mode.x) {
		if (dim.x > thickness) {
			float m = floor(mod(v.x, dim.x));

			if (m <= thickness) {
				return i_args[0];
			}
		}
	}
	if (axis_mode.y) {
		if (dim.y > thickness) {
			float m = floor(mod(v.y, dim.y));

			if (m <= thickness) {
				return i_args[0];
			}
		}
	}
	if (axis_mode.z) {
		if (dim.z > thickness) {
			float m = floor(mod(v.z, dim.z));

			if (m <= thickness) {
				return i_args[0];
			}
		}
	}

	return i_args[1];
}
