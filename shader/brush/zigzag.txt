// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs brush/zigzag [Flip] [Width A] [Width B] [Color A] [Color B]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Flip'  value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Width A'  value = '2'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Width B'  value = '2'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Color A'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Color B'  value = '9'  range = '0 255'  step = '1'  decimal = '0' }
// xs_end


float flip = i_args[0];
float width_a = i_args[1];
float width_b = i_args[2];
float color_a = i_args[3];
float color_b = i_args[4];

float map(vec3 v) {
	float size = width_a + width_b;
	float row = floor(v.y / size);
	float col = floor(v.x / size);
	vec2 k = v.xy - vec2(col, row) * size;
	vec4 c = vec4(color_a, color_b, color_b, color_a);

	if (mod(row + col, 2.0) == 0.0) {
		if (flip == 0.0) {
			return (k.x < width_a ? c.x : c.y);
		} else {
			return (k.x >= width_b ? c.x : c.y);
		}
	} else {
		if (flip == 0.0) {
			return (k.y < width_b ? c.z : c.w);
		} else {
			return (k.y >= width_b ? c.w : c.z);
		}
	}
}
