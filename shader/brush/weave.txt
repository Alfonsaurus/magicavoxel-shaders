// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs brush/weave [Mode] [Size] [Line Color] [Line Width] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Mode'  value = '0'  var = 'm_mode'  range = '0 2'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Size'  value = '4'  var = 'm_size'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Line Color'  value = '10'  var = 'm_line_color'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Line Width'  value = '1'  var = 'm_line_width'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Seed'  value = '1'  var = 'm_seed'  range = '1 100'  step = '1'  decimal = '0' }
// xs_end

int mode = int(m_mode);
float size = m_size;
float line_color = m_line_color;
float line_width = m_line_width;
float global_seed = mix(-437.5453, 437.5453, m_seed / 100.0);

float random(vec2 co, float seed) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + global_seed + seed));
}

float random(vec2 co) {
	return random(co, 0.0);
}

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float map(vec3 v) {
	float j = size + line_width;

	if (mod(v.x, j) > size) {
		return line_color;
	} else if (mod(v.y, j) > size) {
		return line_color;
	} else {
		float row = floor(v.y / j);
		float col = floor(v.x / j);
		float d = random(vec2(row, col));
		vec2 k = v.xy - (vec2(col, row) * j);

		float color;
		float inner;
		vec2 xy;

		if (mod(row + col, 2.0) == 0.0) {
			inner = floor(k.x / (size / 2.0));
			xy = vec2(inner, d);
		} else {
			inner = floor(k.y / (size / 2.0));
			xy = vec2(d, inner);
		}

		if (mode == 0) {
			color = random(xy);
		} else if (mode == 1) {
			float d = row + col + inner;
			color = (mod(d, float(i_num_color_sels)) / float(i_num_color_sels));
		} else if (mode == 2) {
			color = mod(inner, 2.0);
		}

		return pal(color);
	}
}
