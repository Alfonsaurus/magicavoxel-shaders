// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs brush/weave [Mode] [Size] [Color A] [Color B] [Line Color] [Line Width]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Mode'  value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Size'  value = '4'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Color A'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Color B'  value = '9'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Line Color'  value = '10'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '5'  name = 'Line Width'  value = '1'  range = '0 256'  step = '1'  decimal = '0' }
// xs_end

float mode = i_args[0];
float size = i_args[1];
float pal_min = i_args[2];
float pal_max = i_args[3];
float line_color = i_args[4];
float line_width = i_args[5];

float random(vec2 st) {
	return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

float map(vec3 v) {
	float j = size + line_width;

	if (mod(v.x, j) > size) {
		return line_color;
	} else if (mod(v.y, j) > size) {
		return line_color;
	} else {
		float row = floor(v.y / j);
		float col = floor(v.x / j);
		vec2 k = v.xy - (vec2(col, row) * j);

		if (mod(row + col, 2.0) == 0.0) {
			float inner_col = floor(k.x / (size / 2.0));

			if (mode == 0.0) {
				float color = random(vec2(row, inner_col));
				return mix(pal_min, pal_max, color);
			} else {
				return mod(inner_col, 2.0) == 0.0 ? pal_min : pal_max;
			}
		} else {
			float inner_row = floor(k.y / (size / 2.0));

			if (mode == 0.0) {
				float color = random(vec2(inner_row, col));
				return mix(pal_min, pal_max, color);
			} else {
				return mod(inner_row, 2.0) == 0.0 ? pal_min : pal_max;
			}
		}
	}
}
