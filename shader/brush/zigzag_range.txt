// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs brush/zigzag_range [Direction] [Width] [Color A] [Color B]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Direction'  value = '0'  range = '0 3'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Width'  value = '2'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Color A'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Color B'  value = '9'  range = '0 255'  step = '1'  decimal = '0' }
// xs_end

int direction = int(i_args[0]);
float width = i_args[1];
float pal_min = i_args[2];
float pal_max = i_args[3];

float map(vec3 v) {
	v = floor(v);

	if (direction == 1) {
		v.y = -v.y;
	} else if (direction == 2) {
		v.x = -v.x;
		v.y = -v.y;
	} else if (direction == 3) {
		v.x = -v.x;
	}

	float size = floor((max(pal_max, pal_min) - min(pal_max, pal_min) + 1.0) * width);
	float row = floor(v.y / size);
	float col = floor(v.x / size);
	vec2 k = v.xy - vec2(col, row) * size;

	float p = mod(row + col, 2.0) == 0.0 ? min(k.x, k.y) : max(k.x, k.y);

	if (pal_min > pal_max) {
		return pal_min - floor(p / width);
	} else {
		return pal_min + floor(p / width);
	}
}
