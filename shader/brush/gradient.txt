// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// This script utilises or modifies code from other projects or publications.
// Please see the attributions below for more information:
//
// 1. Interweaved gradient noise adapted from "Next Generation Post Processing in Call of Duty Advanced Warfare"
//    by Jorge Jimenez (Graphics R&D Technical Director - Activision Blizzard)
//    http://advances.realtimerendering.com/s2014/index.html
//
// xs brush/gradient [Mode] [Direction] [Noise] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Mode'  value = '0'  var = 'm_mode'  range = '0 5'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Direction'  value = '0'  var = 'm_direction'  range = '0 5'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Noise'  value = '0'  var = 'm_noise'  range = '0 50'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Seed'  value = '1'  var = 'm_seed'  range = '1 100'  step = '1'  decimal = '0' }
// xs_end

int mode = int(m_mode);
int direction = int(m_direction);
float noise = clamp(m_noise / 100.0, 0.0, 1.0);
float global_seed = m_seed / 100.0;

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float random(vec2 co, float seed) {
	float g = mix(-43758.6980280632, 43758.6980280632, global_seed);
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + g + seed));
}

float random(vec3 co, float seed) {
	float r = random(co.xy, seed);
	return random(vec2(r, co.z), seed);
}

float interleaved_gradient_noise(vec2 co) {
	return fract(52.9829189 * fract(dot(co + global_seed, vec2(0.06711056, 0.00583715))));
}

float interleaved_gradient_noise(vec3 co) {
	float r = interleaved_gradient_noise(co.xy);
	return interleaved_gradient_noise(vec2(r, co.z));
}

float scan_lines(vec3 co) {
	return mod(co.z, 2.0) / 2.0;
}

float scan_lines_random(vec3 co) {
	float r = random(co.zz, 0.0);
	return mod(co.z, 2.0) / 2.0 + r - 0.5;
}

float scan_lines_random2(vec3 co) {
	float r = random(co.xy, 0.0);
	return mod(co.z, 2.0) / 2.0 + r - 0.5;
}

float bayer_matrix(vec3 co) {
	co = co - 0.5;
	float k = co.x + co.y / 2.0;

	mat4 m = mat4(0.0,    0.5,    0.125,  0.625,
				  0.75,   0.25,   0.875,  0.375,
				  0.1875, 0.6875, 0.0625, 0.5625,
				  0.9375, 0.4375, 0.8125, 0.3125);
	int x = int(mod(co.x + co.y, 4.0));
	int z = int(mod(co.z, 4.0));

	return m[x][z];
}

float map(vec3 v) {
	vec3 p = floor(v) / i_volume_size;
	float r;

	if (direction == 1) {
		p.z = 1.0 - p.z;
	} else if (direction == 2) {
		p.xz = p.zx;
	} else if (direction == 3) {
		p.x = 1.0 - p.x;
		p.xz = p.zx;
	} else if (direction == 4) {
		p.yz = p.zy;
	} else if (direction == 5) {
		p.y = 1.0 - p.y;
		p.yz = p.zy;
	}

	if (mode == 0) {
		r = interleaved_gradient_noise(v);
	} else if (mode == 1) {
		r = random(v, 0.0);
	} else if (mode == 2) {
		// BUG: Scanlines don't change direction
		r = scan_lines_random(v);
	} else if (mode == 3) {
		// BUG: Scanlines don't change direction
		r = scan_lines(v);
	} else if (mode == 4) {
		// BUG: Scanlines don't change direction
		r = scan_lines_random2(v);
	} else if (mode == 5) {
		r = bayer_matrix(v);
	}

	vec3 k = p + (r * noise - 0.5 * noise);
	return pal(k.z);
}
