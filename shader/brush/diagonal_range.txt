// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs brush/diagonal_range [Direction] [Color A] [Color B] [Width] [Offset]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Direction'  value = '0'  range = '0 5'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Color A'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Color B'  value = '8'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Width'  value = '2'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Offset'  value = '0'  range = '0 256'  step = '1'  decimal = '0' }
// xs_end

float direction = i_args[0];
float pal_min = floor(i_args[1]);
float pal_max = floor(i_args[2]);
float width = max(i_args[3], 1.0);
float offset = floor(i_args[4]);

float map(vec3 v) {
	v = floor(v);

	float x;
	float z;

	if (direction == 0.0) {
		x = v.x;
		z = 0.0;
	} else if (direction == 1.0) {
		x = v.x;
		z = v.z;
	} else if (direction == 2.0) {
		x = v.x;
		z = -v.z;
	} else if (direction == 3.0) {
		x = -v.x;
		z = 0.0;
	} else if (direction == 4.0) {
		x = -v.x;
		z = v.z;
	} else if (direction == 5.0) {
		x = -v.x;
		z = -v.z;
	}

	int n = max(pal_min, pal_max) - min(pal_min, pal_max) + 1.0;
	int f = mod(x + v.y + z - offset, n * width);

	if (pal_min > pal_max) {
		return pal_min - floor(f / width);
	} else {
		return pal_min + floor(f / width);
	}
}
