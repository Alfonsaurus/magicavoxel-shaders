// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs brush/grass [Direction] [Mode] [Density] [Growth] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Direction'  value = '0'  var = 'm_direction'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Mode'  value = '0'  var = 'm_mode'  range = '0 4'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Density'  value = '2'  var = 'm_density'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Growth'  value = '50'  var = 'm_growth'  range = '0 100'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Seed'  value = '1'  var = 'm_seed'  range = '1 100'  step = '1'  decimal = '0' }
// xs_end

int direction = int(m_direction);
int mode = int(m_mode);
float density = m_density;
float growth = mix(1.0, -1.0, m_growth / 100.0);
float global_seed = mix(-43758.6980280632, 43758.6980280632, m_seed / 100.0);

float random(vec2 co, float seed) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + global_seed + seed));
}

float random(vec2 co) {
	return random(co, 0.0);
}

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float map(vec3 v) {
	if (direction == 1) {
		v.z = i_volume_size.z - v.z;
	}

	vec2 cell = floor(vec2(v.xy) / density);
	vec3 local = floor(mod(v, density));
	vec2 placement = floor(vec2(random(cell.xy), random(cell.xy, 170.3170)) * density);

	if (local.x == placement.x && local.y == placement.y) {
		float height = random(cell.yx, -170.3170);
		float z = v.z / i_volume_size.z;
		float p = 1.0 - sqrt(1.0 - pow(height, 2.0));
		float p2 = mix(height, p, growth);

		if (z < p2) {
			float f;

			if (mode == 0) {
				f = p2;
			} else if (mode == 1) {
				f = random(vec2(z, p));
			} else if (mode == 2) {
				f = random(v.xy);
			} else if (mode == 3) {
				f = z / p2;
			} else if (mode == 4) {
				f = 1.0 - (z / p2);
			}

			return pal(f);
		}
	}

	return 0.0;
}
