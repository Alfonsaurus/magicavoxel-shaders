// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs brush/tiles_puzzle [Mode] [Size X] [Size Y] [Line Color] [Line Width] [Noise] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Mode'  value = '0'  var = 'm_mode'  range = '0 4'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Size X'  value = '4'  var = 'm_size_x'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Size Y'  value = '4'  var = 'm_size_y'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '3'  name = 'Line Color'  value = '16'  var = 'm_line_color'  range = '0 255'  step = '1'  decimal = '0' }
// arg : { id = '4'  name = 'Line Width'  value = '1'  var = 'm_line_width'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '5'  name = 'Noise'  value = '0'  var = 'm_noise'  range = '0 100'  step = '1'  decimal = '1' }
// arg : { id = '6'  name = 'Seed'  value = '1'  var = 'm_seed'  range = '1 100'  step = '1'  decimal = '0' }
// xs_end

int mode = int(m_mode);
float line_color = m_line_color;
float line_width = m_line_width;
float noise = clamp(m_noise / 100.0, 0.0, 1.0);
float global_seed = mix(-43758.6980280632, 43758.6980280632, m_seed / 100.0);

vec3 shape = vec3(m_size_x + line_width,
				  m_size_y + line_width,
				  1.0);

float random(vec2 co, float seed) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + global_seed + seed));
}

float random(vec2 co) {
	return random(co, 0.0);
}

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float pal_noise(float p, vec3 v) {
	if (noise > 0.0) {
		float d = random(v.xy, global_seed * 2.0);
		return d <= noise ? pal(d) : pal(p);
	} else {
		return pal(p);
	}
}

float map(vec3 v) {
	vec3 j = floor(v / shape);
	vec3 m = mod(v, shape);
	float tile = random(j.xy);
	float next = tile;
	int i;

	if (tile > 0.5) {
		for (i = 0; i < 5; i += 1) {
			float b = random(j.xy + vec2(float(i), 0.0));

			if (b > 0.5) {
				next = b;
			} else {
				break;
			}
		}

		if (i == 1) {
			if (any(greaterThan(m.xy, shape.xy - vec2(line_width)))) {
				return line_color;
			}
		} else if (m.y > (shape.y - line_width)) {
			return line_color;
		}

		if (mode != 4) {
			next = (next - 0.5) * 2.0;
		}
	} else {
		for (i = 0; i < 5; i += 1) {
			float b = random(j.xy + vec2(0.0, float(i)));

			if (b <= 0.5) {
				next = b;
			} else {
				break;
			}
		}

		if (i == 1) {
			if (any(greaterThan(m.xy, shape.xy - vec2(line_width)))) {
				return line_color;
			}
		} else if (m.x > (shape.x - line_width)) {
			return line_color;
		}

		if (mode != 4) {
			next *= 2.0;
		}
	}

	if (mode == 1) {
		return tile > 0.5 ? pal_noise(0.0, v) : pal_noise(1.0, v);
	} else if (mode == 2) {
		return tile > 0.5 ? line_color : pal_noise(next, v);
	} else if (mode == 3) {
		return tile <= 0.5 ? line_color : pal_noise(next, v);
	} else {
		return pal_noise(next, v);
	}
}
