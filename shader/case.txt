// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs case [Color]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Color'  value = '1'  range = '0 255'  step = '1'  decimal = '0' }
// xs_end

bvec3 axis_mode = equal(ivec3(i_axis), ivec3(1));
bool no_axis_mode = all(equal(ivec3(i_axis), ivec3(0)));

float map(vec3 v) {
	float index = voxel(v);

	if (index == 0.0) {
		vec2 x_range = v.xx;
		vec2 y_range = v.yy;
		vec2 z_range = v.zz;

		if (no_axis_mode || axis_mode.x) {
			x_range.x = v.x - 1.0;
			x_range.y = v.x + 1.0;
		}

		if (no_axis_mode || axis_mode.y) {
			y_range.x = v.y - 1.0;
			y_range.y = v.y + 1.0;
		}

		if (no_axis_mode || axis_mode.z) {
			z_range.x = v.z - 1.0;
			z_range.y = v.z + 1.0;
		}

		for (float x = x_range.x; x <= x_range.y; x += 1.0) {
			for (float y = y_range.x; y <= y_range.y; y += 1.0) {
				for (float z = z_range.x; z <= z_range.y; z += 1.0) {
 					float j = voxel(vec3(x, y, z));

					if (j == i_color_index) {
						return i_args[0];
					}
				}
			}
		}
	}

	return index;
}
