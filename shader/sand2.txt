// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs sand2 [Color]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Color'  value = '0'  range = '0 255'  step = '1'  decimal = '0' }
// xs_end

float random(vec2 co) {
    return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * 43758.6980280632);
}

float random(vec3 co) {
	return random(vec2(random(co.xy), co.z));
}

float map(vec3 v) {
	float index = voxel(v);

	if (index == 0.0) {
		if (voxel(vec3(v.x, v.y, v.z - 1.0)) == i_color_index) {
			bool a = (floor(v.x) == 0.0);
			bool b = (floor(v.x) == i_volume_size.x - 1.0);
			bool c = (floor(v.y) == 0.0);
			bool d = (floor(v.y) == i_volume_size.y - 1.0);

			float z = float((a ? 0.0 : voxel(vec3(v.x - 1.0, v.y, v.z - 1.0))) == i_color_index) +
					  float((b ? 0.0 : voxel(vec3(v.x + 1.0, v.y, v.z - 1.0))) == i_color_index) +
					  float((c ? 0.0 : voxel(vec3(v.x, v.y - 1.0, v.z - 1.0))) == i_color_index) +
					  float((d ? 0.0 : voxel(vec3(v.x, v.y + 1.0, v.z - 1.0))) == i_color_index) +
					  float((a && c ? 0.0 : voxel(vec3(v.x - 1.0, v.y - 1.0, v.z - 1.0))) == i_color_index) +
					  float((b && c ? 0.0 : voxel(vec3(v.x + 1.0, v.y - 1.0, v.z - 1.0))) == i_color_index) +
					  float((a && d ? 0.0 : voxel(vec3(v.x - 1.0, v.y + 1.0, v.z - 1.0))) == i_color_index) +
					  float((b && d ? 0.0 : voxel(vec3(v.x + 1.0, v.y + 1.0, v.z - 1.0))) == i_color_index);

			if (random(v) <= (0.125 * z)) {
				if (i_args[0] == 0.0) {
					return i_color_index;
				} else {
					return i_args[0];
				}
			}
		}
	}

	return index;
}
