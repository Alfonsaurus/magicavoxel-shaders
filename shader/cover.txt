// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2021 Lachlan McDonald
//
// xs cover [Headroom] [Noise] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Headroom'  value = '1'  var = 'm_headroom'  range = '1 256'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Noise'  value = '0'  var = 'm_noise'  range = '0 1'  step = '0.05'  decimal = '1' }
// arg : { id = '2'  name = 'Seed'  value = '1'  var = 'm_seed'  range = '1 100'  step = '1'  decimal = '0' }
// xs_end

float headroom = clamp(1.0, 255.0, m_headroom);
float noise = clamp(0.0, 1.0, m_noise);
float global_seed = mix(-437.5453, 437.5453, m_seed / 100.0);

float random(vec2 co, float seed) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + global_seed + seed));
}

float random(vec3 co, float seed) {
	return random(vec2(random(co.xy, seed), co.z), seed);
}

float pal_mix(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float map(vec3 v) {
	float index = voxel(v);

	if (voxel(vec3(v.x, v.y, v.z - 1.0)) > 0.0) {
		for (float z = 0.0; z < headroom; z += 1.0) {
			if (voxel(vec3(v.x, v.y, v.z + z)) > 0.0) {
				return index;
			}
		}

		float d = random(v, 0.0);
		float z = random(v, 128.0);

		if (z > noise) {
			return pal_mix(d);
		} else {
			return 0.0;
		}
	}

	return index;
}
