// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs primitive/prism [Mode] [Size X] [Size Y]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { name = 'Mode'  var = 'm_mode'  range = '0 1'  value = '0'  step = '1'  precision = '0' }
// arg : { name = 'Size X'  var = 'm_size_x'  range = '0 256'  value = '12'  step = '1'  precision = '0' }
// arg : { name = 'Size Y'  var = 'm_size_y'  range = '0 256'  value = '12'  step = '1'  precision = '0' }
// xs_end

const float PI2 = 3.141592653589793238 * 2.0;

int mode = int(m_mode);
float width_x = min(m_size_x, i_volume_size.x / 2.0);
float width_y = min(m_size_y, i_volume_size.y / 2.0);

float random(vec2 co) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * 43758.6980280632);
}

float random(vec3 co) {
	return random(vec2(random(co.xy), co.z));
}

float check(float pos, float width, float max_pos) {
	if (pos <= width) {
		if (mode == 0) {
			return pos / width * i_volume_size.z;
		} else if (mode == 1) {
			float d1 = pos / width;
			return sin(PI2 * (d1 / 4.0)) * i_volume_size.z;
		}
	} else if (pos >= max_pos - width) {
		if (mode == 0) {
			return (max_pos - pos) / width * i_volume_size.z;
		} else if (mode == 1) {
			float d1 = (max_pos - pos) / width;
			return sin(PI2 * (d1 / 4.0)) * i_volume_size.z;
		}
	} else {
		return max_pos;
	}
}

vec2 check(vec2 pos, vec2 dim) {
	float x = check(pos.x, dim.x, i_volume_size.x);
	float y = check(pos.y, dim.y, i_volume_size.y);
	return vec2(x, y);
}

vec2 roundTowards(vec2 v, float d) {
	v.x = v.x < d ? d : v.x;
	v.y = v.y < d ? d : v.y;
	return v;
}

float map(vec3 v) {
	vec2 j = roundTowards(check(v.xy, vec2(width_x, width_y)), 1.0);
	return all(lessThanEqual(v.zz, j)) ? i_color_index : 0.0;
}
