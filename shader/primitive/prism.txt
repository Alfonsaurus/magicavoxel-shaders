// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2020 Lachlan McDonald
//
// xs primitive/prism [Mode] [Size X] [Size Y]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Mode'  value = '0'  range = '0 1'  step = '1'  decimal = '0' }
// arg : { id = '1'  name = 'Size X'  value = '12'  range = '0 256'  step = '1'  decimal = '0' }
// arg : { id = '2'  name = 'Size Y'  value = '12'  range = '0 256'  step = '1'  decimal = '0' }
// xs_end

const float PI2 = 3.141592653589793238 * 2.0;

int mode = int(i_args[0]);
float width_x = min(i_args[1], i_volume_size.x / 2.0);
float width_y = min(i_args[2], i_volume_size.y / 2.0);

float random(vec2 co) {
    return fract(cos(dot(co.xy, vec2(23.14069263277926, pow(sqrt(2.0), 2.0)))) * 43758.5453);
}

float random(vec3 co) {
    return random(vec2(random(co.xy), co.z));
}

float check(float pos, float width, float max_pos) {
    if (pos <= width) {
        if (mode == 0) {
            return pos / width * i_volume_size.z;
        } else if (mode == 1) {
            float d1 = pos / width;
            return sin(PI2 * (d1 / 4.0)) * i_volume_size.z;
        }
    } else if (pos >= max_pos - width) {
        if (mode == 0) {
            return (max_pos - pos) / width * i_volume_size.z;
        } else if (mode == 1) {
            float d1 = (max_pos - pos) / width;
            return sin(PI2 * (d1 / 4.0)) * i_volume_size.z;
        }
    } else {
        return max_pos;
    }
}

vec2 check(vec2 pos, vec2 dim) {
	float x = check(pos.x, dim.x, i_volume_size.x);
    float y = check(pos.y, dim.y, i_volume_size.y);
	return vec2(x, y);
}

vec2 round_towards(vec2 v, float d) {
	v.x = v.x < d ? d : v.x;
	v.y = v.y < d ? d : v.y;
	return v;
}

float map(vec3 v) {
	vec2 j = round_towards(check(v.xy, vec2(width_x, width_y)), 1.0);
	return all(lessThanEqual(v.zz, j)) ? i_color_index : 0.0;
}
