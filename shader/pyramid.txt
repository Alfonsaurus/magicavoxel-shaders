// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2021 Lachlan McDonald
//
// xs pyramid [Color]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Color'  value = '0'  range = '0 255'  step = '1'  decimal = '0' }
// xs_end

vec2 vol = vec2(i_volume_size.xy - 1.0);

bool no_axis_mode = all(equal(ivec3(i_axis), ivec3(0)));
bvec3 axis_mode = no_axis_mode ? bvec3(true) : equal(ivec3(i_axis), ivec3(1));

bool is_sel_color(float p) {
	for (int i = 0; i < i_num_color_sels; i += 1) {
		if (p == color_sel(float(i)) {
			return true;
		}
	}
	return false;
}

bool is_sel_color(vec3 v) {
	return is_sel_color(voxel(v));
}

float map(vec3 v) {
	float index = voxel(v);

	if (index == 0.0) {
		if (is_sel_color(vec3(v.x, v.y, v.z - 1.0))) {
			float t = 0.0;
			float a = 0.0;

			if (axis_mode.x) {
				t += 2.0;
				a += (is_sel_color(vec3(v.x - 1.0, v.y, v.z - 1.0)) ? 1.0 : 0.0) +
					 (is_sel_color(vec3(v.x + 1.0, v.y, v.z - 1.0)) ? 1.0 : 0.0);
			}
			if (axis_mode.y) {
				t += 2.0;
				a += (is_sel_color(vec3(v.x, v.y - 1.0, v.z - 1.0)) ? 1.0 : 0.0) +
					 (is_sel_color(vec3(v.x, v.y + 1.0, v.z - 1.0)) ? 1.0 : 0.0);
			}

			if (a == t) {
				if (i_args[0] == 0.0) {
					return i_color_index;
				} else {
					return i_args[0];
				}
			}
		}
	}

	return index;
}
