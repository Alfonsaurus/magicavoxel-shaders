// MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
// Copyright (c) 2021 Lachlan McDonald
//
// xs pyramid [Noise] [Seed]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { id = '0'  name = 'Noise'  value = '0'  var = 'm_noise'  range = '0 100'  step = '1'  decimal = '1' }
// arg : { id = '1'  name = 'Seed'  value = '1'  var = 'm_seed'  range = '1 100'  step = '1'  decimal = '0' }
// xs_end

float noise = clamp(m_noise / 100.0, 0.0, 1.0);
float global_seed = mix(-437.5453, 437.5453, m_seed / 100.0);

bool no_axis_mode = all(equal(ivec3(i_axis), ivec3(0)));
bvec3 axis_mode = no_axis_mode ? bvec3(true) : equal(ivec3(i_axis), ivec3(1));

float random(vec2 co, float seed) {
	return fract(cos(dot(co.xy, vec2(23.14069266477926, pow(sqrt(2.0), 2.0)))) * (43758.6980280632 + global_seed + seed));
}

float random(vec3 co, float seed) {
	return random(vec2(random(co.xy, seed), co.z), seed);
}

bool is_sel_color(float p) {
	for (int i = 0; i < i_num_color_sels; i += 1) {
		if (p == color_sel(float(i))) {
			return true;
		}
	}
	return false;
}

bool is_sel_color(vec3 v) {
	return is_sel_color(voxel(v));
}

float pal_mix(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float map(vec3 v) {
	float index = voxel(v);

	if (index == 0.0) {
		float index_beneath = voxel(v - vec3(0.0, 0.0, 1.0));

		if (is_sel_color(index_beneath)) {
			float t = 0.0;
			float a = 0.0;

			if (axis_mode.x) {
				t += 2.0;
				a += (is_sel_color(vec3(v.x - 1.0, v.y, v.z - 1.0)) ? 1.0 : 0.0) +
					 (is_sel_color(vec3(v.x + 1.0, v.y, v.z - 1.0)) ? 1.0 : 0.0);
			}
			if (axis_mode.y) {
				t += 2.0;
				a += (is_sel_color(vec3(v.x, v.y - 1.0, v.z - 1.0)) ? 1.0 : 0.0) +
					 (is_sel_color(vec3(v.x, v.y + 1.0, v.z - 1.0)) ? 1.0 : 0.0);
			}

			if (a == t) {
				float z = random(v, a);

				if (noise == 0.0 || z > noise) {
					return index_beneath;
				} else {
					return pal_mix(z);
				}
			}
		}
	}

	return index;
}
